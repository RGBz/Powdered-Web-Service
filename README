Build a fully-functional, contract-first web service in minutes without havingto know a gosh darn thing about them with               ___                __                __              / _ \___ _    _____/ /___ _______ ___/ /             / ___/ _ \ |/|/ / _  // -_) __/ -_) _  /             /_/   \___/__,__/\_,_/ \__/_/  \__/\_,_/            _      __     __     ____              _                  | | /| / /___ / /    / __/___ _____  __(_)_______          | |/ |/ // -_) _ \  _\ \ / -_) __/ |/ / // __/ -_)         |__/|__/ \__/_.__/ /___/ \__/_/  |___/_/ \__/\__/ No compromises.  No hassle.  Web services in minutes.  Easy as 1-2.I took out the boiler plate and boiled down what you need to define a webservice.  Powdered Web Service only needs two things:    1. The contract (an XSD file that contains all of the data types your web       service exposes)           2. The logic (a Java class whose methods accept and return object models of       the types in the contract)"It can't be that easy, how could you possibly build a contract-first websiteby coding only two files?"How?  By using Powdered Web Service's state-of-the-art two-phase build cycle.PHASE 1:In the first phase you use your schema skills to build up an XSD.  Then yousimply run the ant typesGen task which JARs xjc-generated, JAXB-annotated Javaclasses.  PHASE 2:Develop a single Java class to perform the web service logic.  The methods onthis class can only accept and return instances of the JAXB-annotated classesfrom Phase 1.  Code the logic in these methods like you would any other.  Thensimply run the ant dist task to generate a WAR file and a JAR file containing aweb service client class you can use on remote machines to interact with the webservice.Easy as 1-2.TESTING and DEPLOYMENT:Drop your WAR into a servlet container like Tomcat and then write a quick testusing the client JAR to experience the stunning simplicity and speed of PowderedWeb Service."It can't be that easy?  How can that work?"First of all, in Phase 1, Powdered Web Service uses the tried and true xjcprogram to generate Java classes from the XSD types defined in your contract.The real magic happens at the end of Phase 2.  Here, Powdered Web Service usesthe Command Design Pattern to generate light-weight Command classes to wrap themethods you coded in your Java class.  Essentially each method you defined onthe Java class becomes a web service operation that accepts an XMLrepresentation of the generated Command class that contains elements from yourcontract and returns an XML response element from your contract as well.Powdered Web Service also creates a service client class that generates CommandXML and sends it out to your web service.Powdered Web Service is almost to version 1.0.  It is currently under heavydevelopment.Let me know if you'd like to be involved or if you'd like to be notified onceversion 1.0 is out.- - Anton